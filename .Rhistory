library(viridis)
# Inputs ----
# Locations of terminals on the boundary of the convex hull
#set.seed(7) # make reproducible
# a <- c(runif(1), runif(1))
# b <- c(runif(1), runif(1))
# c <- c(runif(1), runif(1))
# d <- c(runif(1), runif(1))
delta <- 0
a <- c(delta + ifelse(runif(1) < 0.5, -1, 1) * runif(1) * delta, delta + ifelse(runif(1) < 0.5, -1, 1) * runif(1) * delta)
b <- c(1-delta + ifelse(runif(1) < 0.5, -1, 1) * runif(1) * delta, delta + ifelse(runif(1) < 0.5, -1, 1) * runif(1) * delta)
c <- c(1-delta + ifelse(runif(1) < 0.5, -1, 1) * runif(1) * delta, 1-delta + ifelse(runif(1) < 0.5, -1, 1) * runif(1) * delta)
d <- c(delta + ifelse(runif(1) < 0.5, -1, 1) * runif(1) * delta, 1-delta + ifelse(runif(1) < 0.5, -1, 1) * runif(1) * delta)
bnd <- matrix(c(a[1], b[1], c[1], d[1], a[2], b[2], c[2], d[2]), ncol = 2)
# Location of fifth point which must be inside bd(conv({a, b, c, d}))
temp <- FALSE
while (temp == FALSE) {
e <- c(runif(1), runif(1))
temp <- in.out(bnd, matrix(c(e[1], e[2]), ncol = 2))
}
e <- c(0.3478940, 0.475)
# Calculate equilateral triangle points
E_ab <- c(0.5, -sqrt(3)/2)
E_bc <- c(1+sqrt(3)/2, 0.5)
E_cd <- c(0.5, 1+sqrt(3)/2)
E_ad <- c(-sqrt(3)/2, 0.5)
ab <- sqrt((b[1] - a[1])^2 + (b[2] - a[2])^2)
bc <- sqrt((c[1] - b[1])^2 + (c[2] - b[2])^2)
cd <- sqrt((d[1] - c[1])^2 + (d[2] - c[2])^2)
ad <- sqrt((d[1] - a[1])^2 + (d[2] - a[2])^2)
ae <- sqrt((e[1] - a[1])^2 + (e[2] - a[2])^2)
be <- sqrt((e[1] - b[1])^2 + (e[2] - b[2])^2)
ce <- sqrt((e[1] - c[1])^2 + (e[2] - c[2])^2)
de <- sqrt((e[1] - d[1])^2 + (e[2] - d[2])^2)
terminals <- as.data.frame(rbind(a, b, c, d, e))
terminals <- cbind(c("a", "b", "c", "d", "e"), terminals)
names(terminals) <- c("terminal", "x", "y")
s <- 0.005
df <- data.frame(x = rep(seq(0, 1, s), times = 1/s+1),
y = rep(seq(0, 1, s), each = 1/s+1)) %>%
mutate(af = sqrt((x - a[1])^2 + (y - a[2])^2),
bf = sqrt((x - b[1])^2 + (y - b[2])^2),
cf = sqrt((x - c[1])^2 + (y - c[2])^2),
df = sqrt((x - d[1])^2 + (y - d[2])^2),
ef = sqrt((x - e[1])^2 + (y - e[2])^2),
ae.ef.bf.bc.cd.ad = ae + ef + bf + bc + cd + ad,
ab.bc.cf.ef.de.ad = ab + bc + cf + ef + de + ad,
ab.bf.cf.cd.de.ae = ab + bf + cf + cd + de + ae,
ab.be.ce.cd.df.af = ab + be + ce + cd + df + af,
ae.be.bc.cf.df.ad = ae + be + bc + cf + df + ad,
af.bf.bc.ce.de.ad = af + bf + bc + ce + de + ad,
ae.be.bf.cf.cd.ad = ae + be + bf + cf + cd + ad,
ab.bc.cf.df.de.ae = ab + bc + cf + df + de + ae,
af.bf.bc.cd.de.ae = af + bf + bc + cd + de + ae,
ab.bf.cf.ce.de.ad = ab + bf + cf + ce + de + ad,
af.bf.be.ce.cd.ad = af + bf + be + ce + cd + ad,
ab.bc.ce.de.df.af = ab + bc + ce + de + df + af,
ae.be.bc.cd.df.af = ae + be + bc + cd + df + af,
ab.be.ce.cf.df.ad = ab + be + ce + cf + df + ad,
ab.bc.ce.ef.df.ad = ab + bc + ce + ef + df + ad,
af.ef.be.bc.cd.ad = af + ef + be + bc + cd + ad,
ab.bc.cd.de.ef.af = ab + bc + cd + de + ef + af,
ab.bc.cd.df.ef.ae = ab + bc + cd + df + ef + ae,
ab.be.ef.cf.cd.ad = ab + be + ef + cf + cd + ad,
ab.bf.ef.ce.cd.ad = ab + bf + ef + ce + cd + ad)
topology_class <- data.frame(TSP = c("ae.ef.bf.bc.cd.ad",       # "a"
"ab.bc.cf.ef.de.ad",  # "a"
"ab.bf.cf.cd.de.ae",  # "b"
"ab.be.ce.cd.df.af",  # "b"
"ae.be.bc.cf.df.ad",  # "b"
"af.bf.bc.ce.de.ad",  # "b"
"ae.be.bf.cf.cd.ad",  # "c"
"ab.bc.cf.df.de.ae",  # "c"
"af.bf.bc.cd.de.ae",  # "c"
"ab.bf.cf.ce.de.ad",  # "c"
"af.bf.be.ce.cd.ad",  # "c"
"ab.bc.ce.de.df.af",  # "c"
"ae.be.bc.cd.df.af",  # "c"
"ab.be.ce.cf.df.ad",  # "c"
"ab.bc.ce.ef.df.ad",  # "a"
"af.ef.be.bc.cd.ad",  # "a"
"ab.bc.cd.de.ef.af",  # "a"
"ab.bc.cd.df.ef.ae",  # "a"
"ab.be.ef.cf.cd.ad",  # "a"
"ab.bf.ef.ce.cd.ad"), # "a"
#class = c("a", "a", "b", "b", "b", "b", "c", "c", "c", "c", "c", "c", "c", "c", "a", "a", "a", "a", "a", "a"))
class = c("a", "a", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "a", "a", "a", "a", "a", "a"))
temp <- df %>%
gather(TSP, length, 8:27)
temp2 <- temp %>%
group_by(x, y) %>%
summarise(min = min(length)) %>%
left_join(temp, by = c("x", "y")) %>%
filter(length == min) %>%
mutate(ST1 = ifelse(sqrt((E_ad[1] - e[1])^2 + (E_ad[2] - e[2])^2) <= sqrt((E_ad[1] - x)^2 + (E_ad[2] - y)^2),
sqrt((e[1] - E_ad[1])^2 + (e[2] - E_ad[2])^2) + sqrt((x - E_bc[1])^2 + (y - E_bc[2])^2) + ab + cd + sqrt((e[1] - x)^2 + (e[2] - y)^2),
sqrt((e[1] - E_bc[1])^2 + (e[2] - E_bc[2])^2) + sqrt((x - E_ad[1])^2 + (y - E_ad[2])^2) + ab + cd + sqrt((e[1] - x)^2 + (e[2] - y)^2)),
ST2 = ifelse(sqrt((E_ab[1] - e[1])^2 + (E_ab[2] - e[2])^2) <= sqrt((E_ab[1] - x)^2 + (E_ab[2] - y)^2),
sqrt((e[1] - E_ab[1])^2 + (e[2] - E_ab[2])^2) + sqrt((x - E_cd[1])^2 + (y - E_cd[2])^2) + bc + ad + sqrt((e[1] - x)^2 + (e[2] - y)^2),
sqrt((e[1] - E_cd[1])^2 + (e[2] - E_cd[2])^2) + sqrt((x - E_ab[1])^2 + (y - E_ab[2])^2) + bc + ad + sqrt((e[1] - x)^2 + (e[2] - y)^2))) %>%
rowwise() %>%
mutate(ST = min(ST1, ST2)) %>%
select(x, y, TSP, length, ST) %>%
ungroup() %>%
mutate(delta = length - ST,
ratio = ST / length) %>%
left_join(topology_class)
p1 <- ggplot() +
geom_tile(aes(x, y, fill = TSP), temp2, colour = NA) +
geom_point(aes(x, y), terminals, size = 2) +
geom_text(aes(x, y, label = terminal), terminals, nudge_x = 0.015) +
scale_fill_brewer(name = "Shortest cycle", palette = "Spectral") + # Accent, Dark2, Paired, Pastel1, Pastel2, Set1, Set2, Set3
#scale_fill_grey() +
#scale_fill_viridis() +
coord_equal() +
#facet_wrap(~facet) +
#ggtitle("Topology of shortest Hamiltonian cycle on {a,b,c,d,e,f} (varying position of f)") +
theme_bw() +
theme(strip.text = element_blank(),
strip.background = element_blank())
min_ratio <- temp2 %>% top_n(1, wt = length)
min_ratio2 <- temp2 %>% top_n(1, wt = ratio)
p2 <- ggplot() +
geom_tile(aes(x, y, fill = length), temp2, colour = NA) +
geom_point(aes(x, y), terminals, size = 2, colour = "white") +
geom_text(aes(x, y, label = terminal), terminals, colour = "white", nudge_x = 0.015) +
geom_point(aes(x, y), min_ratio) +
geom_text(aes(x, y, label = paste("max length =", round(length, 1), "; f = (", x, ",", y, ")"), sep = ""), min_ratio, nudge_y = -0.02) +
#scale_fill_brewer(palette = "Spectral") + # Accent, Dark2, Paired, Pastel1, Pastel2, Set1, Set2, Set3
#scale_fill_grey() +
scale_fill_viridis(name = "Tour length", direction = 1) +
coord_equal() +
#facet_wrap(~facet) +
#ggtitle("Shortest Hamiltonian cycle / shortest 2-connected Steiner network on {a,b,c,d,e,f} (varying position of f)") +
theme_bw() +
theme(strip.text = element_blank(),
strip.background = element_blank())
p4 <- ggplot() +
geom_tile(aes(x, y, fill = ratio), temp2, colour = NA) +
geom_point(aes(x, y), terminals, size = 2, colour = "white") +
geom_text(aes(x, y, label = terminal), terminals, colour = "white", nudge_x = 0.015) +
geom_point(aes(x, y), min_ratio) +
geom_text(aes(x, y, label = paste("min ratio =", round(length, 1), "; f = (", x, ",", y, ")"), sep = ""), min_ratio2, nudge_y = -0.02) +
#scale_fill_brewer(palette = "Spectral") + # Accent, Dark2, Paired, Pastel1, Pastel2, Set1, Set2, Set3
#scale_fill_grey() +
scale_fill_viridis(name = "L_SN / L_H", direction = 1) +
coord_equal() +
#facet_wrap(~facet) +
#ggtitle("Shortest Hamiltonian cycle / shortest 2-connected Steiner network on {a,b,c,d,e,f} (varying position of f)") +
theme_bw() +
theme(strip.text = element_blank(),
strip.background = element_blank())
p3 <- grid.arrange(p1, p2, ncol = 2)
p3
#ggsave("explore-hull.png", p3, width = 18, height = 10)
#ggsave("hamiltonian-topologies.eps", p1, width = 20, height = 20, units = "cm")
#ggsave("hamiltonian-lengths.eps", p2, width = 20, height = 20, units = "cm")
(1 - sqrt(3)) * 8.55
(sqrt(3) - 1) * 8.55
6/32
install.packages(c("backports", "Matrix", "nlme", "rprojroot"))
?install_github
library(devtools)
library(roxygen2)
?install_github
install_github("marcusvolz/steiner")
library(steiner)
?compute_eq
library(steiner)
test <- compute_eq(runif(2), runif(2), runif(2))
str(test)
length(test)
test[1]
test[2]
library(ggplot2)
a <- runif(2)
b <- runif(2)
c <- runif(2)
e <- compute_eq(a, b, c)
ggplot() +
points <- data.frame(x = c(a[1], b[1], c[1], e[1]), y = c(a[2], b[2], c[2], e[2]), type = c("t", "t", "t", "e"))
ggplot() + geom_point(aes(x, y, colour = type), points)
library(dplyr)
points <- points %>% mutate(label = c("a", "b", "c", "e"))
ggplot() + geom_point(aes(x, y, colour = type), points) + geom_text(aes(x, y, label = label), points)
ggplot() + geom_point(aes(x, y, colour = type), points) + geom_text(aes(x, y, label = label), points) + coord_equal()
plot(cars)
plot(cars)
library(hrbrthemes)
library(tidyverse)
read_delim("../expt/outputs/logs/tests_all_06.log", delim = " ")
read_delim("../expt/outputs/logs/tests_all_06.log", delim = " ") %>%
bind_rows(read_delim("../expt/outputs/logs/tests_all_06_2.log", delim = " "))
read_delim("../expt/outputs/logs/tests_all_06.log", delim = " ") %>%
bind_rows(read_delim("../expt/outputs/logs/tests_all_06_2.log", delim = " ")) %>%
mutate(SMNMaxFSTSz = ifelse(SMNMaxFSTSz > 3, 0, SMNMaxFSTSz)) %>%
group_by(Terminals, SMNMaxFSTSz) %>%
summarise(Count = n()) %>%
spread(SMNMaxFSTSz, Count, fill = 0) %>%
set_names(c("Terminals", "Failed", "TSP", "Non_TSP")) %>%
mutate(PerNonTSP = Non_TSP / (Non_TSP + TSP)) %>%
ggplot() +
geom_point(aes(Terminals, PerNonTSP)) #+
df <- read_delim("../expt/outputs/logs/tests_all_06.log", delim = " ")
df <- read_delim("../expt/outputs/logs/tests_all_06.log", delim = " ")
View(df)
df <- read_delim("../expt/outputs/logs/tests_all_06.log", delim = " ") %>%
bind_rows(read_delim("../expt/outputs/logs/tests_all_06_2.log", delim = " "))
10000 / 1000
df <- read_delim("../expt/outputs/logs/tests_all_06.log", delim = " ") %>%
bind_rows(read_delim("../expt/outputs/logs/tests_all_06_2.log", delim = " ")) %>%
mutate(SMNMaxFSTSz = ifelse(SMNMaxFSTSz > 3, 0, SMNMaxFSTSz))
df <- read_delim("../expt/outputs/logs/tests_all_06.log", delim = " ") %>%
bind_rows(read_delim("../expt/outputs/logs/tests_all_06_2.log", delim = " ")) %>%
mutate(SMNMaxFSTSz = ifelse(SMNMaxFSTSz > 3, 0, SMNMaxFSTSz)) %>%
group_by(Terminals, SMNMaxFSTSz)
df <- read_delim("../expt/outputs/logs/tests_all_06.log", delim = " ") %>%
bind_rows(read_delim("../expt/outputs/logs/tests_all_06_2.log", delim = " ")) %>%
mutate(SMNMaxFSTSz = ifelse(SMNMaxFSTSz > 3, 0, SMNMaxFSTSz)) %>%
group_by(Terminals, SMNMaxFSTSz) %>%
summarise(Count = n())
df <- read_delim("../expt/outputs/logs/tests_all_06.log", delim = " ") %>%
bind_rows(read_delim("../expt/outputs/logs/tests_all_06_2.log", delim = " ")) %>%
mutate(SMNMaxFSTSz = ifelse(SMNMaxFSTSz > 3, 0, SMNMaxFSTSz)) %>%
group_by(Terminals, SMNMaxFSTSz) %>%
summarise(Count = n()) %>%
spread(SMNMaxFSTSz, Count, fill = 0)
View(df)
df <- read_delim("../expt/outputs/logs/tests_all_06.log", delim = " ") %>%
bind_rows(read_delim("../expt/outputs/logs/tests_all_06_2.log", delim = " ")) %>%
mutate(SMNMaxFSTSz = ifelse(SMNMaxFSTSz > 3, 0, SMNMaxFSTSz)) %>%
group_by(Terminals, SMNMaxFSTSz) %>%
summarise(Count = n()) %>%
spread(SMNMaxFSTSz, Count, fill = 0) %>%
set_names(c("Terminals", "Failed", "TSP", "Non_TSP")) %>%
mutate(PerNonTSP = Non_TSP / (Non_TSP + TSP))
df <- read_delim("../expt/outputs/logs/tests_all_06.log", delim = " ") %>%
bind_rows(read_delim("../expt/outputs/logs/tests_all_06_2.log", delim = " ")) %>%
mutate(SMNMaxFSTSz = ifelse(SMNMaxFSTSz > 3, 0, SMNMaxFSTSz)) %>%
group_by(Terminals, SMNMaxFSTSz) %>%
summarise(Count = n()) %>%
spread(SMNMaxFSTSz, Count, fill = 0) %>%
set_names(c("Terminals", "Failed", "TSP", "Non_TSP"))
df <- read_delim("../expt/outputs/logs/tests_all_06.log", delim = " ") %>%
bind_rows(read_delim("../expt/outputs/logs/tests_all_06_2.log", delim = " ")) %>%
mutate(SMNMaxFSTSz = ifelse(SMNMaxFSTSz > 3, 0, SMNMaxFSTSz)) %>%
group_by(Terminals, SMNMaxFSTSz) %>%
summarise(Count = n())
df <- read_delim("../expt/outputs/logs/tests_all_06.log", delim = " ") %>%
bind_rows(read_delim("../expt/outputs/logs/tests_all_06_2.log", delim = " ")) %>%
mutate(SMNMaxFSTSz = ifelse(SMNMaxFSTSz > 3 | SMNMaxFSTSz == "NA", 0, SMNMaxFSTSz)) %>%
group_by(Terminals, SMNMaxFSTSz) %>%
summarise(Count = n()) %>%
spread(SMNMaxFSTSz, Count, fill = 0) %>%
set_names(c("Terminals", "Failed", "TSP", "Non_TSP")) %>%
mutate(PerNonTSP = Non_TSP / (Non_TSP + TSP))
df <- read_delim("../expt/outputs/logs/tests_all_06.log", delim = " ") %>%
bind_rows(read_delim("../expt/outputs/logs/tests_all_06_2.log", delim = " ")) %>%
mutate(SMNMaxFSTSz = ifelse(SMNMaxFSTSz > 3 | SMNMaxFSTSz == "NA", 0, SMNMaxFSTSz)) %>%
group_by(Terminals, SMNMaxFSTSz) %>%
summarise(Count = n())
df <- read_delim("../expt/outputs/logs/tests_all_06.log", delim = " ") %>%
bind_rows(read_delim("../expt/outputs/logs/tests_all_06_2.log", delim = " ")) %>%
mutate(SMNMaxFSTSz = ifelse(SMNMaxFSTSz > 3 | SMNMaxFSTSz == "NA", 0, SMNMaxFSTSz)) %>%
group_by(Terminals, SMNMaxFSTSz)
df <- read_delim("../expt/outputs/logs/tests_all_06.log", delim = " ") %>%
bind_rows(read_delim("../expt/outputs/logs/tests_all_06_2.log", delim = " ")) %>%
mutate(SMNMaxFSTSz = ifelse(SMNMaxFSTSz > 3 | SMNMaxFSTSz == "NA", 0, SMNMaxFSTSz)) %>%
group_by(Terminals, SMNMaxFSTSz) %>%
summarise(Count = n())
df <- read_delim("../expt/outputs/logs/tests_all_06.log", delim = " ") %>%
bind_rows(read_delim("../expt/outputs/logs/tests_all_06_2.log", delim = " ")) %>%
mutate(SMNMaxFSTSz = ifelse(SMNMaxFSTSz > 3 | is.na(SMNMaxFSTSz), 0, SMNMaxFSTSz)) %>%
group_by(Terminals, SMNMaxFSTSz) %>%
summarise(Count = n())
df <- read_delim("../expt/outputs/logs/tests_all_06.log", delim = " ") %>%
bind_rows(read_delim("../expt/outputs/logs/tests_all_06_2.log", delim = " ")) %>%
mutate(SMNMaxFSTSz = ifelse(SMNMaxFSTSz > 3 | is.na(SMNMaxFSTSz), 0, SMNMaxFSTSz)) %>%
group_by(Terminals, SMNMaxFSTSz) %>%
summarise(Count = n()) %>%
spread(SMNMaxFSTSz, Count, fill = 0) %>%
set_names(c("Terminals", "Failed", "TSP", "Non_TSP")) %>%
mutate(PerNonTSP = Non_TSP / (Non_TSP + TSP))
ggplot(df) +
geom_point(aes(Terminals, PerNonTSP))
install.packages(c("commonmark", "jsonlite"))
install.packages("commonmark")
?ggsave
library(ggplot2)
?ggsave
?geom_segment
install.packages(c("cluster", "Rcpp", "survival"))
setwd("C:/Users/mvolz/Dropbox/mathart/packcircles")
library(ggart)
library(ggforce)
library(packcircles)
library(viridis)
library(tidyverse)
# Make reproducible ----
set.seed(1)
# Parameters ----
n <- 750 # number of circles
m <- 9 # number of facets
# Function for making pack of circles ----
make_pack <- function(n, dir = 1, rep = 1) {
rep(1:n, times = 5)
r <- 1:n
if(dir < 0) {
circleProgressiveLayout(rev(r)) %>% mutate(fill = runif(n), facet = 1)
} else {
circleProgressiveLayout(r) %>% mutate(fill = runif(n), facet = 2)
}
}
if(animate) {
df1 <- make_pack(n, dir = 1)
df2 <- make_pack(n, dir = -1)
df <- list(df1, df2)
tf <- tween_states(df, tweenlength = 2, statelength = 1, ease = "exponential-out", nframes = 25)
} else {
df <- 1:m %>%
map_df(~make_pack(runif(1, 0.75 * n, n), runif(1, -1, 1), runif(1, n, n)), .id = "facet")
}
animate <- TRUE # animate?
library(tweenr)
library(ggart)
library(ggforce)
library(packcircles)
library(tweenr)
library(viridis)
library(tidyverse)
# Make reproducible ----
set.seed(1)
# Parameters ----
n <- 750 # number of circles
m <- 9 # number of facets
animate <- TRUE # animate?
# Function for making pack of circles ----
make_pack <- function(n, dir = 1, rep = 1) {
rep(1:n, times = 5)
r <- 1:n
if(dir < 0) {
circleProgressiveLayout(rev(r)) %>% mutate(fill = runif(n), facet = 1)
} else {
circleProgressiveLayout(r) %>% mutate(fill = runif(n), facet = 2)
}
}
if(animate) {
df1 <- make_pack(n, dir = 1)
df2 <- make_pack(n, dir = -1)
df <- list(df1, df2)
tf <- tween_states(df, tweenlength = 2, statelength = 1, ease = "exponential-out", nframes = 25)
} else {
df <- 1:m %>%
map_df(~make_pack(runif(1, 0.75 * n, n), runif(1, -1, 1), runif(1, n, n)), .id = "facet")
}
install.packages("packcircles")
if(animate) {
df1 <- make_pack(n, dir = 1)
df2 <- make_pack(n, dir = -1)
df <- list(df1, df2)
tf <- tween_states(df, tweenlength = 2, statelength = 1, ease = "exponential-out", nframes = 25)
} else {
df <- 1:m %>%
map_df(~make_pack(runif(1, 0.75 * n, n), runif(1, -1, 1), runif(1, n, n)), .id = "facet")
}
library(packcircles)
if(animate) {
df1 <- make_pack(n, dir = 1)
df2 <- make_pack(n, dir = -1)
df <- list(df1, df2)
tf <- tween_states(df, tweenlength = 2, statelength = 1, ease = "exponential-out", nframes = 25)
} else {
df <- 1:m %>%
map_df(~make_pack(runif(1, 0.75 * n, n), runif(1, -1, 1), runif(1, n, n)), .id = "facet")
}
p <- ggplot() +
geom_circle(aes(x0 = x, y0 = y, r = radius, alpha = radius, fill = radius, frame = .frame),
ifelse(anim, tf, df), size = 1,
n = 90) +
coord_equal() +
scale_fill_gradient(low = "#efedf5", high = "#3f007d") +
facet_wrap(~facet) +
theme_blankcanvas()
p <- ggplot() +
geom_circle(aes(x0 = x, y0 = y, r = radius, alpha = radius, fill = radius, frame = .frame),
ifelse(animate, tf, df), size = 1,
n = 90) +
coord_equal() +
scale_fill_gradient(low = "#efedf5", high = "#3f007d") +
facet_wrap(~facet) +
theme_blankcanvas()
p <- ggplot() +
geom_circle(aes(x0 = x, y0 = y, r = radius, alpha = radius, fill = radius, frame = .frame),
tf, size = 1,
n = 90) +
coord_equal() +
scale_fill_gradient(low = "#efedf5", high = "#3f007d") +
facet_wrap(~facet) +
theme_blankcanvas()
if(animate) {
animation::ani.options(interval = 1/15)
gg_animate(p, "gifs/gif0001.gif", title_frame = FALSE, ani.width = 400, ani.height = 400)
} else {
ggsave("plots/plot001.png", p, width = 40, height = 40, units = c("in"))
}
library(gganimate)
install.packages("gganimate")
install.packages("gg_animate")
library(devtools)
install_github("dgrtwo/gganimate")
library(gganimate)
if(animate) {
animation::ani.options(interval = 1/15)
gg_animate(p, "gifs/gif0001.gif", title_frame = FALSE, ani.width = 400, ani.height = 400)
} else {
ggsave("plots/plot001.png", p, width = 40, height = 40, units = c("in"))
}
if(animate) {
animation::ani.options(interval = 1/15)
gganimate(p, "gifs/gif0001.gif", title_frame = FALSE, ani.width = 400, ani.height = 400)
} else {
ggsave("plots/plot001.png", p, width = 40, height = 40, units = c("in"))
}
p <- ggplot() +
geom_circle(aes(x0 = x, y0 = y, r = radius, alpha = radius, fill = radius, frame = .frame),
tf, size = 1,
n = 90) +
coord_equal() +
scale_fill_gradient(low = "#efedf5", high = "#3f007d") +
#facet_wrap(~facet) +
theme_blankcanvas()
# Save plot ----
if(animate) {
animation::ani.options(interval = 1/15)
gganimate(p, "gifs/gif0001.gif", title_frame = FALSE, ani.width = 400, ani.height = 400)
} else {
ggsave("plots/plot001.png", p, width = 40, height = 40, units = c("in"))
}
if(animate) {
df1 <- make_pack(n, dir = 1)
df2 <- make_pack(n, dir = -1)
df <- list(df1, df2, df1)
tf <- tween_states(df, tweenlength = 2, statelength = 1, ease = "exponential-out", nframes = 25)
} else {
df <- 1:m %>%
map_df(~make_pack(runif(1, 0.75 * n, n), runif(1, -1, 1), runif(1, n, n)), .id = "facet")
}
# Make plot ----
p <- ggplot() +
geom_circle(aes(x0 = x, y0 = y, r = radius, alpha = radius, fill = radius, frame = .frame),
tf, size = 0.5,
n = 90) +
coord_equal() +
scale_fill_gradient(low = "#efedf5", high = "#3f007d") +
#facet_wrap(~facet) +
theme_blankcanvas()
# Save plot ----
if(animate) {
animation::ani.options(interval = 1/15)
gganimate(p, "gifs/gif0001.gif", title_frame = FALSE, ani.width = 800, ani.height = 800)
} else {
ggsave("plots/plot001.png", p, width = 40, height = 40, units = c("in"))
}
if(animate) {
df1 <- make_pack(n, dir = 1)
df2 <- make_pack(n, dir = -1)
df <- list(df1, df2, df1)
tf <- tween_states(df, tweenlength = 2.5, statelength = 0.5, ease = "exponential-out", nframes = 25)
} else {
df <- 1:m %>%
map_df(~make_pack(runif(1, 0.75 * n, n), runif(1, -1, 1), runif(1, n, n)), .id = "facet")
}
# Make plot ----
p <- ggplot() +
geom_circle(aes(x0 = x, y0 = y, r = radius, alpha = radius, fill = radius, frame = .frame),
tf, size = 0.5,
n = 90) +
coord_equal() +
scale_fill_gradient(low = "#efedf5", high = "#3f007d") +
#facet_wrap(~facet) +
theme_blankcanvas()
# Save plot ----
if(animate) {
animation::ani.options(interval = 1/30)
gganimate(p, "gifs/gif0001.gif", title_frame = FALSE, ani.width = 600, ani.height = 600)
} else {
ggsave("plots/plot001.png", p, width = 40, height = 40, units = c("in"))
}
install.packages("geozoo")
library(geozoo)
conic.spiral(n = 10000, a = 0.2, b = 1, c = 0.1, w = 2)
install.packages("tourr")
library(tourr)
conic.spiral(n = 10000, a = 0.2, b = 1, c = 0.1, w = 2)
test <- torus(p = 3, n = 10000, radius = 2^((p - 2):0))
test <- torus(p = 3, n = 10000, radius = 2^((3 - 2):0))
df <- test$points
View(df)
ggplot(aes(V1, V2, colour = V3), df) + geom_point()
ggplot(df, aes(V1, V2, colour = V3)) + geom_point()
ggplot(as.data.frame(df), aes(V1, V2, colour = V3)) + geom_point()
ggplot(as.data.frame(df), aes(V1, V2, colour = V3)) + geom_point() + theme_blankcanvas()
ggplot(as.data.frame(df), aes(V1, V2, colour = V3)) + geom_point() + theme_blankcanvas() + coord_equal()
ggplot(as.data.frame(df), aes(V1, V2, colour = V3)) + geom_point(size = 0.5) + theme_blankcanvas() + coord_equal()
test <- torus(p = 2, n = 10000)
ggplot(as.data.frame(test$points), aes(V1, V2, colour = V3)) + geom_point(size = 0.5) + theme_blankcanvas() + coord_equal()
ggplot(as.data.frame(test$points), aes(V1, V2)) + geom_point(size = 0.5) + theme_blankcanvas() + coord_equal()
test <- torus(p = 3, n = 10000, radius = 2^((p - 2):0))
test <- torus(p = 3, n = 10000, radius = 2^((3 - 2):0))
ggplot(as.data.frame(test$points), aes(V1, V2)) + geom_point(size = 0.5) + theme_blankcanvas() + coord_equal()
ggplot(as.data.frame(test$points), aes(V1, V2)) + geom_point(size = 1) + theme_blankcanvas() + coord_equal()
ggplot(as.data.frame(test$points), aes(V1, V2)) + geom_point(size = 0.75) + theme_blankcanvas() + coord_equal()
